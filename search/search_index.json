{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#my-home-lab-repository","title":"\ud83d\ude80 My home-lab repository","text":"<p>\u2728 Hosted with k0s &amp; Talos</p> <p>\u2728 Managed by ArgoCD</p> <p>\u2728 Powered by Renovate and GitHub</p> <p>INFRASTRUCTURE</p> <p> </p> <p>TOOLING HELM VERSION</p> <p> </p> <p> </p> <p>This project utilizes Infrastructure as Code and GitOps to automate provisioning, operating, and updating self-hosted services in my homelab.</p>"},{"location":"VPN/wireguard/","title":"WireGuard","text":""},{"location":"VPN/wireguard/#privileges","title":"Privileges","text":"<p>WireGuard will need some specific privileges to be able to NAT traffic and redirect your requests. Consider using <code>sysctls</code> options on your nodes. You need to specify it at kubelet level:</p> <ul> <li><code>net.ipv4.ip_forward</code></li> <li><code>net.ipv4.conf.all.src_valid_mark</code></li> </ul> <p>For example in <code>k0s</code> :</p> <pre><code>---\napiVersion: k0sctl.k0sproject.io/v1beta1\nkind: Cluster\nmetadata:\n  name: fullstack\n  user: admin\nspec:\n  hosts:\n    - role: single\n      installFlags:\n        - --debug\n        - --disable-components=autopilot,helm,windows-node,konnectivity-server\n        - --kubelet-extra-args=\"--allowed-unsafe-sysctls=net.ipv4.ip_forward,net.ipv4.conf.all.src_valid_mark\"\n</code></pre> <p>And your also need to specify it at pod level as well as <code>NET_ADMIN</code> capability:</p> <pre><code>spec:\n  automountServiceAccountToken: false\n  containers:\n    - image: wgportal/wg-portal:v2\n      imagePullPolicy: IfNotPresent\n      name: wg-portal\n      securityContext:\n        capabilities:\n          add:\n            - NET_ADMIN\n  securityContext:\n    sysctls:\n      - name: net.ipv4.ip_forward\n        value: '1'\n      - name: net.ipv4.conf.all.src_valid_mark\n        value: '1'\n</code></pre>"},{"location":"authentication/oidc/","title":"OIDC","text":""},{"location":"authentication/oidc/#vault","title":"Vault","text":"<p>Blueprint for Vault OIDC auth :</p> <pre><code>---\nversion: 1\nmetadata:\n  name: fullstack-vault\nentries:\n  - id: provider\n    model: authentik_providers_oauth2.oauth2provider\n    state: 'present'\n    identifiers:\n      name: fullstack-vault\n    attrs:\n      authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]\n      invalidation_flow: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]\n      signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]\n      client_type: confidential\n      redirect_uris:\n        - url: https://vault.k0s-fullstack.fredcorp.com/oidc/callback\n          matching_mode: strict\n        - url: https://vault.k0s-fullstack.fredcorp.com/ui/vault/auth/oidc/oidc/callback\n          matching_mode: strict\n\n      access_code_validity: minutes=1\n      access_token_validity: hours=1\n      refresh_token_validity: days=30\n\n      sub_mode: hashed_user_id\n      property_mappings:\n        - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'openid'\"]]\n        - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'profile'\"]]\n        - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'email'\"]]\n\n  - id: application\n    model: authentik_core.application\n    state: 'present'\n    identifiers:\n      name: 'fullstack-vault'\n    attrs:\n      name: fullstack-vault\n      group: Infrastructure\n      meta_description: HashiCorp Vault\n      provider: !Find [authentik_providers_oauth2.oauth2provider, [name, fullstack-vault]]\n      policy_engine_mode: any\n      slug: fullstack-vault\n</code></pre> <p>Vault must be configured for OIDC provider with Authentik :</p> <ul> <li><code>ca.pem</code> : is the CA chain for the Authentik certificate</li> <li><code>fullstack-vault</code> : is the Authentik application slug</li> </ul> <pre><code>vault login -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com\n\nvault write -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com auth/oidc/config oidc_discovery_url=\"https://authentik.k0s-fullstack.fredcorp.com/application/o/fullstack-vault/\" oidc_client_id=\"&lt;authentik-provider-client-id&gt;\" oidc_client_secret=\"&lt;authentik-provider-client-secret&gt;\" default_role=\"reader\" oidc_discovery_ca_pem=@ca.pem\n\nvault write -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com auth/oidc/role/reader bound_audiences=\"&lt;authentik-provider-client-id&gt;\" allowed_redirect_uris=\"https://vault.k0s-fullstack.fredcorp.com/ui/vault/auth/oidc/oidc/callback\" allowed_redirect_uris=\"https://vault.k0s-fullstack.fredcorp.com/oidc/callback\" user_claim=\"sub\" policies=\"reader\"\n</code></pre> <p>To manage groups, you can configure following:</p> <pre><code>vault write -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com auth/oidc/role/reader bound_audiences=\"&lt;authentik-provider-client-id&gt;\" allowed_redirect_uris=\"https://vault.k0s-fullstack.fredcorp.com/ui/vault/auth/oidc/oidc/callback\" allowed_redirect_uris=\"https://vault.k0s-fullstack.fredcorp.com/oidc/callback\" us\ner_claim=\"sub\" policies=\"reader\" groups_claim=\"groups\" oidc_scopes=[ \"openid profile email\" ]\n\nvault write -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com identity/group name=\"administrator\" policies=\"administrator\" type=\"external\" metadata=responsibility=\"Manage Vault instance\"\n</code></pre> <p>Access information with:</p> <pre><code>vault auth list -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com\nvault read -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com identity/group/name/administrator\n</code></pre> <p>Link to Authentik:</p> <pre><code>vault write -tls-skip-verify -address=https://vault.k0s-fullstack.fredcorp.com identity/group-alias mount_accessor=\"auth_oidc_b59bc9a6\" canonical_id=\"cbd6e4ac-e516-4424-742a-41a978252bb6\" name=\"group name in authentik\"\n</code></pre> <p>You need to Create an Authentik group named <code>group name in authentik</code> and a Vault policy for admins like that :</p> <pre><code>path \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n</code></pre>"},{"location":"authentication/oidc/#wireguard-portal","title":"WireGuard Portal","text":"<p>Wiregard portal relies on <code>is_admin</code> property to make user admin of the server. This property can be passed as an OIDC claim with a specific script in <code>Scope Mapping</code> and then added to the provider:</p> <pre><code>return {\n  \"is_admin\": ak_is_group_member(request.user, name=\"Wireguard admins\")\n}\n</code></pre> <p>The configuration need to be made as OIDC :</p> <pre><code>config:\n  core:\n    admin_user: '${ADMIN_USER}'\n    admin_password: '${ADMIN_PASSWORD}'\n    import_existing: false\n    create_default_peer: true\n    self_provisioning_allowed: true\n\n  auth:\n    callback_url_prefix: https://wireguard.k0s-fullstack.fredcorp.com/api/v0\n    oidc:\n      - id: Authentik\n        provider_name: Authentik\n        display_name: OIDC Authentik\n        base_url: https://authentik.k0s-fullstack.fredcorp.com/application/o/fullstack-wireguard/\n        client_id: '${OIDC_CLIENT_ID}'\n        client_secret: '${OIDC_CLIENT_SECRET}'\n        extra_scopes:\n          - profile\n          - email\n          - openid\n          - is_admin\n        field_map:\n          email: email\n          user_identifier: email\n          is_admin: is_admin\n        registration_enabled: true\n        log_user_info: false\n</code></pre> <p>The variables here can be injected with kubernetes <code>Secret</code> in <code>values.yaml</code> file:</p> <pre><code># OIDC secret config\nenvFrom:\n  - secretRef:\n      name: oidc-wireguard\n  - secretRef:\n      name: admin-wireguard\n</code></pre> <p>In Authentik, you need to specify the <code>is_admin</code> in the provider properties:</p> <pre><code>- id: provider\n  model: authentik_providers_oauth2.oauth2provider\n  state: present\n  identifiers:\n    name: fullstack-wireguard\n  attrs:\n    authorization_flow: !Find [authentik_flows.flow, [slug, default-provider-authorization-implicit-consent]]\n    invalidation_flow: !Find [authentik_flows.flow, [slug, default-invalidation-flow]]\n    signing_key: !Find [authentik_crypto.certificatekeypair, [name, authentik Self-signed Certificate]]\n    client_type: confidential\n    redirect_uris:\n      - url: https://wireguard.k0s-fullstack.fredcorp.com/api/v0/auth/login/authentik/callback\n        matching_mode: strict\n\n    access_code_validity: minutes=1\n    access_token_validity: hours=1\n    refresh_token_validity: hours=1\n\n    sub_mode: hashed_user_id\n    property_mappings:\n      - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'openid'\"]]\n      - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'profile'\"]]\n      - !Find [authentik_core.propertymapping, [name, \"authentik default OAuth Mapping: OpenID 'email'\"]]\n      - !Find [authentik_core.propertymapping, [name, \"OAuth mapping: OpenID 'is_admin' for Wireguard\"]]\n\n  - model: authentik_providers_oauth2.scopemapping\n    identifiers:\n      name: \"OAuth mapping: OpenID 'is_admin' for Wireguard\"\n    attrs:\n      description: is_admin claim for Wireguard Portal OIDC\n      expression: |\n        return {\n          \"is_admin\": ak_is_group_member(request.user, name=\"Wireguard admins\")\n        }\n      name: wireguard-is-admin\n      scope_name: is_admin\n</code></pre>"},{"location":"authentication/oidc/#homarr","title":"Homarr","text":"<p>Homarr is easy to integrate with OIDC. You just need to specify some variables in the <code>env</code> key from <code>values.yaml</code> file:</p> <pre><code>env:\n  AUTH_PROVIDERS: credentials,oidc\n  AUTH_SESSION_EXPIRY_TIME: 1h\n  AUTH_OIDC_AUTO_LOGIN: 'false'\n  AUTH_OIDC_ISSUER: https://authentik.k0s-fullstack.fredcorp.com/application/o/fullstack-homarr/\n  AUTH_OIDC_URI: 'https://authentik.k0s-fullstack.fredcorp.com/application/o/authorize/'\n  AUTH_OIDC_CLIENT_NAME: Authentik\n  AUTH_OIDC_SCOPE_OVERWRITE: openid email profile groups\n  AUTH_OIDC_GROUPS_ATTRIBUTE: groups\n  AUTH_LOGOUT_REDIRECT_URL: https://homarr.k0s-fullstack.fredcorp.com/auth/login\n</code></pre> <p>And you can used <code>Secret</code> to inject ClientID and ClientSecret for OIDS auth:</p> <pre><code>envSecrets:\n  authOidcCredentials:\n    existingSecret: auth-oidc-secret\n    oidcClientId: oidc-client-id\n    oidcClientSecret: oidc-client-secret\n</code></pre> <p>Variable <code>NODE_TLS_REJECT_UNAUTHORIZED: '0'</code> can be used in case certificates are not recognized. Th</p>"},{"location":"authentication/proxy-auth/","title":"Forward Auth","text":""},{"location":"authentication/proxy-auth/#reverse-proxy-setup-traefik","title":"Reverse-Proxy setup : Traefik","text":""},{"location":"authentication/proxy-auth/#in-cluster-setup","title":"In-cluster setup","text":"<p>Traefik needs to be configured to act as a reverse proxy with Authentik. Use this <code>Middleware</code> with the added <code>authorization</code> header from the official documentation to be able to pass Basic Auth headers in case you need to login transparently to non OIDC servers.</p> <pre><code>---\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: authentik\nspec:\n  forwardAuth:\n    address: http://ak-outpost-authentik-embedded-outpost.authentik:9000/outpost.goauthentik.io/auth/traefik\n    trustForwardHeader: true\n    authResponseHeaders:\n      - X-authentik-username\n      - X-authentik-groups\n      - X-authentik-entitlements\n      - X-authentik-email\n      - X-authentik-name\n      - X-authentik-uid\n      - X-authentik-jwt\n      - X-authentik-meta-jwks\n      - X-authentik-meta-outpost\n      - X-authentik-meta-provider\n      - X-authentik-meta-app\n      - X-authentik-meta-version\n      - authorization\n</code></pre> <p>The field <code>address</code> should point to your authentik outpost service inside the cluster:</p> <pre><code>NAME                                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE\nak-outpost-authentik-embedded-outpost   ClusterIP   10.96.153.169    &lt;none&gt;        9000/TCP,9300/TCP,9443/TCP   5d16h\nauthentik-k0s-postgresql                ClusterIP   10.97.192.194    &lt;none&gt;        5432/TCP                     4d15h\nauthentik-k0s-postgresql-hl             ClusterIP   None             &lt;none&gt;        5432/TCP                     4d15h\nauthentik-k0s-redis-headless            ClusterIP   None             &lt;none&gt;        6379/TCP                     4d15h\nauthentik-k0s-redis-master              ClusterIP   10.101.158.29    &lt;none&gt;        6379/TCP                     4d15h\nauthentik-k0s-server                    ClusterIP   10.111.223.218   &lt;none&gt;        80/TCP,443/TCP               4d15h\n</code></pre> <p>You also need to add annotation to Traefik <code>Ingress</code>. The pattern here is <code>&lt;namespace&gt;-&lt;middleware-name&gt;@kubernetescrd</code> :</p> <pre><code>annotations:\n  traefik.ingress.kubernetes.io/router.middlewares: traefik-authentik@kubernetescrd\n</code></pre> <p>For <code>IngressRoute</code> you have to specify differently :</p> <pre><code>---\napiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: traefik-k0s-dashboard\nspec:\n  entryPoints:\n    - web\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`traefik.k0s-fullstack.fredcorp.com`)\n      middlewares:\n        - name: authentik\n          namespace: traefik\n      priority: 10\n      services:\n        - kind: TraefikService\n          name: api@internal\n          namespace: traefik\n    - kind: Rule\n      match: Host(`traefik.k0s-fullstack.fredcorp.com`) &amp;&amp; PathPrefix(`/outpost.goauthentik.io/`)\n      priority: 15\n      services:\n        - kind: Service\n          name: ak-outpost-authentik-embedded-outpost\n          namespace: authentik\n          port: 9000\n</code></pre>"}]}